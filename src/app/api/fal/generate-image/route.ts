import { NextRequest, NextResponse } from "next/server";
import {
  generateImageWithRetry,
  getPlaceholderImageUrl,
} from "@/lib/falService";
import { generatePromptFromSegment } from "@/lib/promptGenerator";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { turns, riteOfPassage, segmentNumber, sessionId } = body;

    if (!turns || !Array.isArray(turns)) {
      return NextResponse.json(
        { error: "Invalid request: turns array required" },
        { status: 400 }
      );
    }

    if (!sessionId) {
      return NextResponse.json(
        { error: "Invalid request: sessionId required" },
        { status: 400 }
      );
    }

    console.log(
      `üé® Generating image for segment ${segmentNumber || "unknown"}...`
    );

    // Step 1: Generate prompt from conversation using OpenAI
    const promptResult = await generatePromptFromSegment(turns, riteOfPassage);

    console.log("Generated prompt:", promptResult.imagePrompt);

    // Step 2: Generate image with Fal.ai (with retry)
    const imageResult = await generateImageWithRetry({
      prompt: promptResult.imagePrompt,
      imageSize: "landscape_16_9",
      numInferenceSteps: 4, // Fast generation
      guidanceScale: 3.5,
      numImages: 1,
      enableSafetyChecker: true,
    });

    console.log("Image result:", JSON.stringify(imageResult, null, 2));

    // Step 3: Handle result or fallback
    if (imageResult && imageResult.images && imageResult.images.length > 0) {
      console.log("‚úÖ Image generated by Fal.ai");

      // Use Fal.ai URL directly (no blob storage upload)
      const falImageUrl = imageResult.images[0].url;
      console.log("üñºÔ∏è Using Fal.ai URL directly:", falImageUrl);

      return NextResponse.json({
        success: true,
        imageUrl: falImageUrl, // Return Fal.ai URL directly
        prompt: promptResult.imagePrompt,
        keywords: promptResult.keywords,
        era: promptResult.era,
        location: promptResult.location,
        metadata: {
          width: imageResult.images[0].width,
          height: imageResult.images[0].height,
          seed: imageResult.seed,
          source: "fal-ai", // Indicate source
        },
      });
    } else {
      // Use placeholder image if generation failed after retries
      console.warn("‚ö†Ô∏è Image generation failed, using placeholder");
      const placeholderUrl = getPlaceholderImageUrl("Memory Image");

      return NextResponse.json({
        success: true,
        imageUrl: placeholderUrl,
        prompt: promptResult.imagePrompt,
        keywords: promptResult.keywords,
        era: promptResult.era,
        location: promptResult.location,
        isPlaceholder: true,
        metadata: {
          width: 1920,
          height: 1080,
          seed: 0,
        },
      });
    }
  } catch (error: unknown) {
    console.error("‚ùå Image generation API error:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";

    // Return placeholder even on error
    const placeholderUrl = getPlaceholderImageUrl("Error");

    return NextResponse.json({
      success: true, // Still return success to not break the flow
      imageUrl: placeholderUrl,
      prompt: "Error generating image",
      keywords: [],
      isPlaceholder: true,
      error: errorMessage,
      metadata: {
        width: 1920,
        height: 1080,
        seed: 0,
      },
    });
  }
}
