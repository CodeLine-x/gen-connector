import { NextRequest, NextResponse } from "next/server";
import { generateVideoWithRetry } from "@/lib/falService";
import { generateVideoPromptFromSession } from "@/lib/promptGenerator";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { turns, riteOfPassage, sessionId, songUrl, memories = [] } = body;

    if (!turns || !Array.isArray(turns)) {
      return NextResponse.json(
        { error: "Invalid request: turns array required" },
        { status: 400 }
      );
    }

    console.log(`üé¨ Generating video for session ${sessionId || "unknown"}...`);

    // Always generate AI video, with or without audio
    if (songUrl) {
      console.log(
        "üéµ Song detected - will generate AI video with audio mixing"
      );
    } else {
      console.log("üé¨ No song found - will generate AI video without audio");
    }

    // Step 1: Generate comprehensive video prompt from all conversation and memories
    const promptResult = await generateVideoPromptFromSession(
      turns,
      riteOfPassage,
      memories
    );

    console.log("Generated video prompt:", promptResult.videoPrompt);

    // Step 2: Generate video with Fal.ai (with retry)
    console.log("‚è±Ô∏è Generating 10-second video (may take 60-90 seconds)...");

    const videoResult = await generateVideoWithRetry({
      prompt: promptResult.videoPrompt,
      duration: 10, // Always 10 seconds (maximum for seedance/lite model)
      aspectRatio: "16:9",
    });

    // Step 3: Handle result
    if (videoResult && videoResult.video) {
      console.log("‚úÖ Video generated by Fal.ai");

      // Use Fal.ai URL directly (no blob storage upload)
      const falVideoUrl = videoResult.video.url;
      console.log("üé¨ Using Fal.ai URL directly:", falVideoUrl);

      return NextResponse.json({
        success: true,
        videoUrl: falVideoUrl, // Return Fal.ai URL directly
        prompt: promptResult.videoPrompt,
        keywords: promptResult.keywords,
        era: promptResult.era,
        location: promptResult.location,
        metadata: {
          fileName: videoResult.video.file_name,
          fileSize: videoResult.video.file_size,
          contentType: videoResult.video.content_type,
          seed: videoResult.seed,
          source: "fal-ai", // Indicate source
        },
      });
    } else {
      // Video generation failed after retries
      console.error("‚ö†Ô∏è Video generation failed after retries");

      return NextResponse.json(
        {
          success: false,
          error: "Video generation failed after retries",
          prompt: promptResult.videoPrompt,
        },
        { status: 500 }
      );
    }
  } catch (error: unknown) {
    console.error("‚ùå Video generation API error:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";

    return NextResponse.json(
      {
        success: false,
        error: errorMessage,
      },
      { status: 500 }
    );
  }
}
